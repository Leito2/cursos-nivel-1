
/* GRID (controlar el exceso de celdas) 
para la proxima mirar como se usa auto-fill y auto-fit para tambien controlar este exceso de manera dinámica
*/

.grid-container {
  width: 100vw;
  background-color: #888;
  display: grid;
  grid-template-columns: repeat(3, minmax(min-content, 1fr));
  grid-template-rows: repeat(3, 150px);
  grid-gap: 5px; 
}
.grid-items {
  background-color: #bbb;
}

/*ahora cuando tengo exceso de celdas en mi tabla, se ve de una manera en la que no definimos en height*/

.grid-container-dos {
  margin-top: 100px;
  width: 100vw;
  background-color: #888;
  display: grid;
  grid-template-columns: repeat(3, minmax(min-content, 1fr));
  grid-template-rows: repeat(3, 150px);
  gap: 5px;/*ahora es mejor usar gap*/ 
  grid-auto-flow: row; /*por defecto se crean nuevas filas cuando no caben las celdas*/
/*para decir cual va a ser el tamaño de esas nuevas filas entonces:*/
  grid-auto-rows: 100px; /*las nuevas filas COMPLETAS van a ser de 100px (aca no se usa repeat() )*/
}
.grid-items-dos {
  background-color: #bbb;
}


/*ahora para crear nuevas celumnas*/

.grid-container-tres {
  margin-top: 100px;
  width: 100vw;
  background-color: #888;
  display: grid;
  grid-template-columns: repeat(3, minmax(min-content, 1fr));
  grid-template-rows: repeat(3, 150px);
  grid-gap: 5px; 
  grid-auto-flow: column; /* vamos a por defecto crear columnas cuando se haga un exceso de celdas en la matriz que nosotros creamos */
  grid-auto-columns: minmax(100px, 1fr);/*crea en exceso de celdas (columnas de 100px y maximo lo que coja de exceso dividido las 4 columnas, es como un flex-grow: 1)*/
}
.grid-items-tres {
  background-color: #bbb;
}

/*2 manera fundamentales para rellenar esos espacios, o si se daña muy feo la matriz
1.con grid-auto-flow: dense (si se daña feo)
2.haciendo span o asignando rangos de row-lines y column-lines. (para rellenar como queramos)
bonus.no ser pendejo y saber cuando usar grid y usar grid area a ser posible para evitar esto*/

.grid-container-cuatro {
  margin-top: 100px;
  width: 100vw;
  background-color: #888;
  display: grid;
  grid-template-columns: repeat(3, minmax(min-content, 1fr));
  grid-template-rows: repeat(3, 150px);
  grid-gap: 5px;
  grid-auto-flow: column;
  grid-auto-columns: 150px;

}
.grid-items-cuatro {
  background-color: #bbb;
}
.grid-items-cuatro:first-child {
  grid-row: 2 / 3; /*lo daño a proposito*/
}
/*esto lo podriamos rellenar con 2 propiedades
1. en el 3 hacemos un grid-column: 1 / 3
2. en el 10 hascemos un grid-row: 2 / 4

 pero tambien podemos arreglar de una manera automatizada el espacio de arriba a la izquierda con: 
 grid-auto-flow: dense;
*/

.grid-container-cinco {
  margin-top: 100px;
  width: 100vw;
  background-color: #888;
  display: grid;
  grid-template-columns: repeat(3, minmax(min-content, 1fr));
  grid-template-rows: repeat(3, 150px);
  grid-gap: 5px;
  grid-auto-flow: dense; /*lo arreglamos de una manera automatica*/
  grid-auto-flow: row dense;/*lo mismo (tambien hay column dense el cual arregla pero crea columnas por lo que mete a el item 10 a la derecha en una nueva columna)*/
  grid-auto-rows: 100px; /*creamos la fila de abajo*/
}
.grid-items-cinco {
  background-color: #bbb;
}
.grid-items-cinco:first-child {
  grid-row: 2 / 3;
}
/*luego el unico problema es que alargamos la celda 10: 
grid-column: 1 / 4
grid-column: 1 / span 3
*/

/*las dos son manera muy distintas de arreglar pero esto es para dominar conceptos nada maś*/