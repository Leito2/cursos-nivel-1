.flex-container {
  display: flex;
  width: 100vw;
  height: auto;
}
.flex-item {
  background-color: lightblue;
  height: 100px;
  width: 100px; /*si coloco un width al tener activado flex-wrap: wrap, tira para abajo cuando una caja es forzada a disminuir tamaño, pero con min-with cuando usamos flex, podemos hacer que ocupe más espacio*/
  min-width: 100px;
  margin: 10px;
}
.flex-item:nth-child(1) {
  background-color: lightskyblue;
}
.flex-item:nth-child(8) {
  background-color: lightgray;
}
/*primero entender que es el Main axis y Cross axis
-------------------------------------------->
main start                          main end
_______________MAIN AXIS_____________________
(es un eje imaginario en x en dirección derecha que es donde se van ubicando las cajas por defecto)
 | cross start
 |
 |
 |                   CROSS AXIS
 |
 |
 |
 |
\─/ cross end
(es otra direccion de un eje imaginario en y de arriba a abajo y no es la direccion por defecto)


( CUANDO SE CAMBIA UN DIRECCION EN EL MAIN AXIS O EN EL CROSS AXIS LOS ROLES SE INTERCAMBIAN POR LO QUE SI SE CAMBIA UNO POR DEFECTO SE CAMBIA EL OTRO)
*/
.flex-container {
  flex-direction: row; /*POR DEFECTO POR EL MAIN AXIS*/
  flex-direction: row-reverse; /*es main axis pero cambia la direccion del main end*/
  flex-direction: column; /*solo va por el cross axis*/
  flex-direction: column-reverse; /*cambia al cross axis y cambia el sentido del cross end*/
  flex-direction: row;
}
/*Si quieres que el contenedor con display flex tire las cajas que tiene adentro hacia abajo ya que la cross axis esta por defecto hacia abajo*/
.flex-container {
  flex-wrap: wrap; /*luego tambien hay wrap-reverse*/
}
.flex-item {
  flex: 1;
}
/*UNA SHORT HAND PARA:
FLEX-DIRECCION: row, row-reverse, column, column-reverse
Y
FLEX-GRAP: nowrap, wrap, wrap-reverse
ES
flex-flow: flex-direction flex-wrap;
*/
.flex-container {
 flex-flow: row wrap;
}

/*para controlar esto que sucede con wrap podemos utilizar justify-content*/
.flex-item {
  width: 100px;
  max-width: 100px;
}
.flex-container {
  justify-content: baseline; /*por defecto*/
  justify-content: center; /*se centra el contenido hacia la midad pero no deja la misma distancia en los extremos (solo se nota cuando tenemos mas espacio que cajas)*/
  justify-content: space-around; /*crea un margin uniforme entre todos los objetos(todos con el mismo margen)*/
  justify-content: space-between; /*crea un marin uniforme que separa solo los objetos por ejemplo si son 2 objetos es el mimsmo margin left del objeto de la derecha que el margin right del objeto de la izquierda*/
  justify-content: space-evenly;  /*el margin se acomoda con tal de que la separacion entre objeto y ojeto sea la misma y con los extremos*/
}



/*saber que wrap para column funciona siempre que se defina el tamaño del viewport o en este caso seria un caja con 100VW y 100VH*/
.flex-container {
  width: 100vw;
  height: 100vh;
}
/*primero cuando se tiene solo una linea entonces para ajustar el contenido se usa align-items*/
.dos {
  align-items: stretch; /*valor por defecto, si no se le define a lo objetos el height entonces este se estira*/
}
.d0s {
  background-color: lightblue;
  width: 100px;
  margin: 10px;
}
.d0s:nth-child(1) {
  background-color: lightskyblue;
}
.d0s:nth-child(7) {
  background-color: lightgray;
}


/*cuando hay varias filas entonces se ajusta el contenido con align-content*/
.tres {
  align-content: center; /*luego se alinean en el centro*/
}
.tles {
  background-color: lightblue;
  width: 100px;
  min-width: 100px;
  height: 100px;
  margin: 10px;
}
.tles:nth-child(1) {
  background-color: lightskyblue;
}
.tles:nth-child(14) {
  background-color: lightgray;
}


/*luego una que se parece a stretch pero no se estira si no se define el width*/
.cuatro {
  align-content: flex-start; /*luego se alinean arriba*/
}
.cu4tro {
  background-color: lightblue;
  width: 100px;
  min-width: 100px;
  height: 100px;
  margin: 10px;
}
.cu4tro:nth-child(1) {
  background-color: lightskyblue;
}
.cu4tro:nth-child(14) {
  background-color: lightgray;
}


/*luego una que es alrevez tipo para que ahora si sirva: wrap-reverse */
.cinco {
  align-content: flex-end; /*luego se alinean en el abajo*/
/*  flex-flow: row wrap-reverse; (lo malo es que si colocamos esto entonces se va para arriba) */

/* en realidad esto tambien sucederia al revez con flex-start y se iria para abajo pero el orden wrap-reverse seria de izq a derecha (se arreglaria con un row-reverse) 
ESTO:   flex-flow: row-reverse wrap-reverse; <---- cuando se tiene un align-content: flex-start;
*/
}
.c1nco {
  background-color: lightblue;
  width: 100px;
  min-width: 100px;
  height: 100px;
  margin: 10px;
}
.c1nco:nth-child(1) {
  background-color: lightskyblue;
}
.c1nco:nth-child(14) {
  background-color: lightgray;
}


/*por ultimo uno que es casi igual a flex-start*/
.seis {
  align-content: baseline;
  flex-flow: row wrap-reverse;
}
.ceis {
  background-color: lightblue;
  width: 100px;
  min-width: 100px;
  height: 100px;
  margin: 10px;
}
.ceis:nth-child(1) {
  background-color: lightskyblue;
}
.ceis:nth-child(14) {
  background-color: lightgray;
}